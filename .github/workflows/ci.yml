# this_file: .github/workflows/ci.yml
name: CI

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Run tests on multiple platforms
  test:
    name: Test - ${{ matrix.os }} - Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        exclude:
          # macOS runners are expensive, only test latest Python
          - os: macos-latest
            python-version: '3.8'
          - os: macos-latest
            python-version: '3.9'
          - os: macos-latest
            python-version: '3.10'
          - os: macos-latest
            python-version: '3.11'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
    
    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install hatch hatch-vcs maturin pytest pytest-benchmark
    
    - name: Build extension in development mode
      run: |
        pip install -e .
    
    - name: Run Rust tests
      run: cargo test --verbose
    
    - name: Run Rust clippy
      run: cargo clippy -- -D warnings
    
    - name: Check Rust formatting
      run: cargo fmt -- --check
    
    - name: Run Python tests
      run: pytest tests/ -v
    
    - name: Run benchmarks (without comparison)
      run: pytest tests/test_benchmarks.py -v --benchmark-only --benchmark-disable-gc

  # Build wheels for distribution
  build-wheels:
    name: Build wheels - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install cibuildwheel
      run: python -m pip install cibuildwheel
    
    - name: Build wheels
      run: python -m cibuildwheel --output-dir wheelhouse
      env:
        CIBW_BUILD: cp38-* cp39-* cp310-* cp311-* cp312-*
        CIBW_SKIP: "*-musllinux_i686 *-win32 pp*"
        CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
        CIBW_MANYLINUX_I686_IMAGE: manylinux2014
        CIBW_BEFORE_BUILD: pip install hatch hatch-vcs maturin
        CIBW_BUILD_FRONTEND: "pip"
        CIBW_ENVIRONMENT: 'PATH="$HOME/.cargo/bin:$PATH"'
        CIBW_ENVIRONMENT_WINDOWS: 'PATH="$UserProfile\.cargo\bin;$PATH"'
    
    - name: Upload wheels
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}
        path: ./wheelhouse/*.whl

  # Build source distribution
  build-sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install build tools
      run: pip install hatch hatch-vcs maturin build
    
    - name: Build sdist
      run: python -m build --sdist -o dist/
    
    - name: Upload sdist
      uses: actions/upload-artifact@v4
      with:
        name: sdist
        path: ./dist/*.tar.gz

  # Publish to PyPI
  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [test, build-wheels, build-sdist]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Download wheels
      uses: actions/download-artifact@v4
      with:
        pattern: wheels-*
        merge-multiple: true
        path: dist
    
    - name: Download sdist
      uses: actions/download-artifact@v4
      with:
        name: sdist
        path: dist
    
    - name: List distribution files
      run: ls -la dist/
    
    - name: Publish to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        skip-existing: true
        verbose: true
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
    
    # Only publish to real PyPI for non-pre-release tags
    - name: Publish to PyPI
      if: "!contains(github.ref, 'rc') && !contains(github.ref, 'beta') && !contains(github.ref, 'alpha')"
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        skip-existing: true
        verbose: true
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}